#UNIT 4 :-
Python intepretor
Pythin shell
Indentation
Atoms
Identifiers and keywords
Literals                         // what , types ,eg
Strings                          // examples
Operators         

...................x..........................x.........................x...........................x...................

Interpreter :-
      The Python interpreter is a bytecode interpreter: its input is instruction sets called bytecode. When you write Python, the leser, parser, and compiler generate code objects for the interpreter to operate on. Each code object contains a set of instructions to be executed—that's the bytecode—plus other information that the interpreter will need. Bytecode is an intermediate representation of Python code: it expresses the source code that you wrote in a way the interpreter can understand. It's analogous to the way that assembly language serves as an intermediate representation between C code and a piece of hardware.

Python shell  : -
  	       Python is an interpreter language. It means it executes the code line by line. Python provides a Python Shell, which is used to execute a single Python command and display the result.It is also known as REPL (Read, Evaluate, Print, Loop), where it reads the command, evaluates the command, prints the result, and loop it back to read the command again.

Indentation :- 
	 Indentation refers to the spaces at the beginning of a code line. Python uses indentation to indicate a block of code.
Atoms :-

Keywords :- 
	Keywords are the reserved words in Python. We cannot use a keyword as a variable name, function name or any other identifier. They are used to define the syntax and structure of the Python language.
Identifiers :-
	An identifier is a name given to entities like class, functions, variables, etc. It helps to differentiate one entity from another.

Literals :-	
	Literals in Python is defined as the raw data assigned to variables or constants while programming. We mainly have five types of literals which includes string literals, numeric literals, Boolean  literals, literal collections and a special literal None.
Strings :- 	
	A string is a sequence of characters .A character is simply a symbol. For example, the English language has 26 characters .In Python, a string is a sequence of Unicode characters. Unicode was introduced to include every character in all languages and bring uniformity in encoding.
EG :-   	 my_string = 'Hello'
print(my_string)

Operators :-         
	Python Operators in general are used to perform operations on values and variables. These are standard symbols used for the purpose of logical and arithmetic operations. In this article, we will look into different types of Python operators.



UNIT 5 :
1. Input and output statement
2. Control statement    // branching if else statement
3. looping --> types
		while - syntax eg
		for  -  "
4. difference between break and continue statemet   // characteristics    Break and continue
		basis
		dwfination
		syntax
		Eg
		explanation of the program
		
..................x..................................x.................................x..............................

Input and output statement
		We use the widely used print() statement to display some data on the screen.
We can output the particular data on some device(screen) or even in some file.
While writing real-world programs, we have to write statements that explicitly output numbers and strings.
SYNTAX:
print(object(s), sep=' ', end='\n', file=file, flush=False)

Definition of few keywords of the above statement:

	• object(s) are the values to be printed on the screen. They are converted to strings before getting printed.

	• sep keyword is used to specify how to separate the objects inside the same print statement. By default, we have it as sep=' ', a space between two objects.

	• end is used to print a particular thing after all the values are printed. By default, we have end as \n, which provides a new line after each print() statement.

	• file is used to specify where to display the output. By default, it is sys.stdout (which is the screen).

	• flush specifies the Boolean expression if the output is False or True. By default, it is False. In Python, the output from the print() goes into a buffer. Using the flush= True parameter helps in flushing the buffer as soon as we use the print() statement.

Example :

print(0, 1, 2)
print(0, 1, 2, sep='$')
print(1, 2, sep='@', end='%')
Output:

0 1 2  # Here we have space between values by default.
0$1$2
1@2%

Python Input
	In Python, input( ) function is used to accept data as input at run time. The syntax for input() function is,
Variable = input (“prompt string”)
Where, prompt string in the syntax is a statement or message to the user, to know what input can be given.
If a prompt string is used, it is displayed on the monitor; the user can provide expected data from the input device. The input( ) takes whatever is typed from the keyboard and stores the entered data in the given variable. If prompt string is not given in input( ) no message is displayed on the screen, thus, the user will not know what is to be typed as input.
The input ( ) accepts all data as string or characters but not as numbers. If a numerical value is entered, the input values should be explicitly converted into numeric data type. The int( ) function is used to convert string data as integer data explicitly.

Example :
x = int (input(“Enter Number 1: ”))
y = int (input(“Enter Number 2: ”))
print (“The sum = ”, x+y)
Output:
Enter Number 1: 34
Enter Number 2: 56
The sum = 90
			
				

